#!/usr/bin/env python
""" Script that splits the file master.pdf produced by the NSF Proposal template into the individual parts required for submissions """

import re
import subprocess
import icecream
from icecream import ic
from optparse import OptionParser


def main(options):
    baseFileName = options.filename

    # Open log file
    fileName = baseFileName + '.log'
    logFile = open(fileName, 'r')

    if options.verbose:
        ic(fileName)

    # Regexp for matching split markers
    reProg = re.compile(
        r'Split marker \[([\w\-]*)\] \[(start|end)\] \[(\d*)\]')

    # Check the log file line by line and add matches to list
    matchList = []
    for (lineNb, line) in enumerate(logFile):
        m = reProg.findall(line)
        if m:
            matchList += m
            if options.verbose:
                print('Match found on line', lineNb + 1, ':', m)

    if options.verbose:
        ic(matchList)

    # Transform the match list into a double dictionary
    matchDict = {}
    for m in matchList:
        if m[0] not in matchDict:
            matchDict[m[0]] = {}
        pageNumber = int(m[2])
        if m[1] == 'end':
            # Split marker gives +1 page for end. Fix that
            pageNumber -= 1
        matchDict[m[0]][m[1]] = pageNumber

    if not checkMatchDict(matchDict):
        return -1

    pdfFileName = baseFileName + '.pdf'

    for sectionName, v in matchDict.items():
        # Split a section in its own file
        cmd = [
            'pdftk', pdfFileName, 'cat',
            str(v['start']) + '-' + str(v['end']), 'output',
            sectionName + '.pdf'
        ]
        ic(cmd)
        subprocess.check_call(cmd)

        # Strip all annotations
        cmd = ['pdfStripAnnotations', sectionName + '.pdf']
        ic(cmd)
        subprocess.check_call(cmd)


def checkMatchDict(matchDict):
    ''' Checks consistency of starts/ends for match dictionary '''
    for k, v in matchDict.items():
        # check presence of start and end
        if 'start' not in v:
            print('Missing start for section ' + k)
            return False
        if 'end' not in v:
            print('Missing end for section ' + k)
            return False
        if v['end'] < v['start']:
            print('Start/end page numbers for section ' + k +
                  ' not consistent')
            return False
        return True


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option(
        "-f",
        "--master-file",
        dest="filename",
        help="base name of the master file to split without extension",
        default="master")
    parser.add_option("-v",
                      "--verbose",
                      action="store_true",
                      dest="verbose",
                      default=False,
                      help="print intermediate details")
    (options, args) = parser.parse_args()
    main(options)
